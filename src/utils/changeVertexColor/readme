// 1. Create the cube geometry and setup the color attribute:
// Create a cube geometry
const geometry = new THREE.BoxGeometry(1, 1, 1);

// Create a color array for each vertex
const colors = new Float32Array(geometry.attributes.position.count * 3);
colors.fill(1); // Initialize all colors to white
geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
// We create a Float32Array to store colors. The length is position.count * 3 because:

// Each vertex needs 3 color values (R, G, B)
// position.count gives us the number of vertices
// We fill the array with 1 (white color) as the initial color.
// We add this color data to the geometry as an attribute named 'color'.


/**
 *2. Q. But why are we colouring the geometry?? Isn't the color passsed inside the material ????
 * Great questions! Let's dive into these concepts in more detail:

Coloring the geometry:

You're right that we're initializing the color attribute of the geometry to white. However, this isn't exactly "coloring the whole cube" in the traditional sense. Let me explain:

In Three.js, the geometry defines the shape and structure of an object, including its vertices, faces, and various attributes like position, normal, and color.
The color attribute we're adding to the geometry is not immediately visible. It's data that can be used by the material later.
We're not coloring the geometry in the sense of giving it a visible color. We're preparing color data that can be accessed and used for rendering.

Why do this if the color is passed in the material?

The material usually defines a single color for the entire object.
By adding color data to the geometry, we enable per-vertex or per-face coloring, which allows for more detailed color control.
The material will use this color data when vertexColors is set to true.
 */





// 2. Material :
// const material = new THREE.MeshStandardMaterial({
//     vertexColors: true,
//     flatShading: true
//   });
/**
 * vertexColors: true:
This tells the material to use the color data we've added to the geometry.
Without this, the material would ignore the per-vertex colors and use a single color for the entire mesh.
When true, the material will interpolate between vertex colors across each face.
 */